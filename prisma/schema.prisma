generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "sqlite"
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Organisation {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String
  nameShort   String
  slugName    String
  departments Department[]
  employees   User[]

  @@unique([slugName])
}

model Department {
  id             String               @id @default(cuid())
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  name           String
  nameShort      String
  organisation   Organisation         @relation(fields: [organisationId], references: [id])
  organisationId String
  slugName       String
  employees      DepartmentEmployee[]
  schedules      Schedule[]

  @@unique([organisationId, slugName])
}

enum Role {
  USER
  ADMIN
}

model User {
  id                    String               @id @default(cuid())
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  role                  Role                 @default(USER)
  firstName             String
  lastName              String
  email                 String               @unique
  passwordHash          String?
  passwordResetToken    String?
  emailValidationToken  String?
  organisation          Organisation         @relation(fields: [organisationId], references: [id])
  organisationId        String
  departments           DepartmentEmployee[]
  canViewOrganisations  Boolean              @default(false)
  canCreateOrganisation Boolean              @default(false)
  bookings              Booking[]
}

model DepartmentEmployee {
  department          Department @relation(fields: [departmentId], references: [id])
  departmentId        String
  employee            User       @relation(fields: [employeeId], references: [id])
  employeeId          String
  assignedAt          DateTime   @default(now())
  assignedBy          String?
  isDefaultDepartment Boolean    @default(false)
  canViewEmployees    Boolean    @default(false)
  canCreateEmployee   Boolean    @default(false)

  @@id([departmentId, employeeId])
}

model Schedule {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  name         String
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
  tasks        Task[]
}

model Task {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  name       String
  schedule   Schedule  @relation(fields: [scheduleId], references: [id])
  scheduleId String
  bookings   Booking[]
}

model Booking {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  date      DateTime
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}
