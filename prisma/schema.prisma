generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Booking {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  date      DateTime
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

enum CRUD {
  CREATE
  READ
  UPDATE
  DELETE
}

model Department {
  id             String               @id @default(cuid())
  createdAt      DateTime             @default(now())
  createdBy      User                 @relation(name: "DepartmentCreatedBy", fields: [createdById], references: [id])
  createdById    String
  updatedAt      DateTime             @updatedAt
  name           String
  nameShort      String?
  slug           String               @unique
  organisation   Organisation         @relation(fields: [organisationId], references: [id])
  organisationId String
  employees      DepartmentEmployee[]
  schedules      Schedule[]
  tasks          Task[]

  @@unique([organisationId, slug])
}

model DepartmentEmployee {
  id                  String               @id @default(cuid())
  department          Department           @relation(fields: [departmentId], references: [id])
  departmentId        String
  user                User                 @relation(fields: [userId], references: [id])
  userId              String
  assignedAt          DateTime             @default(now())
  assignedBy          String?
  isDefaultDepartment Boolean              @default(false)
  departmentPresences DepartmentPresence[]
  canViewEmployees    Boolean              @default(false)
  canCreateEmployee   Boolean              @default(false)
  canDeleteEmployee   Boolean              @default(false)
  canViewTasks        Boolean              @default(false)
  canCreateTask       Boolean              @default(false)
  taskAuthorisations  CRUD[]

  @@unique([departmentId, userId])
}

model DepartmentPresence {
  id                     String                  @id @default(cuid())
  departmentEmployee     DepartmentEmployee      @relation(fields: [departmentEmployeeId], references: [id])
  departmentEmployeeId   String
  from                   DateTime
  departmentPresenceDays DepartmentPresenceDay[]
}

model DepartmentPresenceDay {
  id                   String             @id @default(cuid())
  departmentPresence   DepartmentPresence @relation(fields: [departmentPresenceId], references: [id])
  departmentPresenceId String
  day                  Int
  hours                Decimal
}

model Organisation {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  createdBy   User         @relation(name: "OrganisationCreatedBy", fields: [createdById], references: [id])
  createdById String
  name        String
  nameShort   String?
  slug        String       @unique
  departments Department[]
  employees   User[]       @relation(name: "UserOrganisation")
}

enum Role {
  USER
  ADMIN
}

model Schedule {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  name            String
  slug            String
  department      Department       @relation(fields: [departmentId], references: [id])
  departmentId    String
  scheduleMembers ScheduleMember[]
  scheduleTasks   ScheduleTask[]

  @@unique([departmentId, slug])
}

model ScheduleMember {
  id         String   @id @default(cuid())
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  assignedAt DateTime @default(now())
  assignedBy String?

  @@unique([scheduleId, userId])
}

model ScheduleTask {
  id         String   @id @default(cuid())
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId String
  task       Task     @relation(fields: [taskId], references: [id])
  taskId     String
  assignedAt DateTime @default(now())
  assignedBy String?

  @@unique([scheduleId, taskId])
}

model SpecialDate {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  date      DateTime
  name      String
}

model Task {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now())
  createdBy      User           @relation(fields: [createdById], references: [id])
  createdById    String
  name           String
  nameShort      String?
  department     Department     @relation(fields: [departmentId], references: [id])
  departmentId   String
  description    String?
  bookings       Booking[]
  durationPerDay Decimal        @default(1)
  daysOfTheWeek  String         @default("0111110")
  scheduleTasks  ScheduleTask[]
}

model User {
  id                    String               @id @default(cuid())
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  role                  Role                 @default(USER)
  firstName             String
  lastName              String
  initials              String?
  email                 String               @unique
  passwordHash          String?
  passwordResetToken    String?
  emailValidationToken  String?
  organisation          Organisation?        @relation(name: "UserOrganisation", fields: [organisationId], references: [id])
  organisationId        String?
  departmentEmployees   DepartmentEmployee[]
  canViewOrganisations  Boolean              @default(false)
  canCreateOrganisation Boolean              @default(false)
  bookings              Booking[]
  schedules             ScheduleMember[]
  tasksCreated          Task[]
  organisationsCreated  Organisation[]       @relation(name: "OrganisationCreatedBy")
  departmentsCreated    Department[]         @relation(name: "DepartmentCreatedBy")
}
